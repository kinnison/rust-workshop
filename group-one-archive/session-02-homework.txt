Session 2 homework
==================

As last week, the first part will be practice for what we've looked at this week
while part two will be building up the work toward a BF interpreter.

Part 1 - Practice for structs and enumerations
----------------------------------------------

For this homework task you do not have complete control over the data structures
since I want you to practice certain things so I'm guiding the code design
a little.  It'll not be glorious, but you will get practice.  This is a big part 1
but you'll have learned a lot ready for part 2.

You will have input in the form:

    ---8<---
    Daniel Silverstone:3
    Raoul Hidalgo Charman:2
    Jeeeun Evans:3
    Chris Polin:2
    Christopher Phang:1
    Finn Ball:2
    Phillip Smyth
    James Ennis:10
    Michael Drake:1
    Daniel Silverstone:1
    Raoul Hidalgo Charman:2
    Jeeeun Evans:4
    Chris Polin:1
    Christopher Phang:9
    Finn Ball:7
    Phillip Smyth:1
    James Ennis
    Michael Drake:7
    Daniel Silverstone:5
    Raoul Hidalgo Charman
    Jeeeun Evans:7
    Chris Polin:8
    Christopher Phang:4
    Finn Ball:3
    Phillip Smyth:5
    James Ennis:6
    Michael Drake:7
    Daniel Silverstone:1
    Raoul Hidalgo Charman:9
    Jeeeun Evans:3
    Chris Polin:7
    Christopher Phang:5
    Finn Ball:4
    Phillip Smyth:5
    James Ennis:8
    Michael Drake
    ---8<---

I would like you to define a enum to represent a line.  It should have
two variants.  One for the form "name:number" and one for the form "name".

I want you to implement `std::convert::From` for your enumeration, converting
from either `&str`, `&String` or, if you're feeling exuberant, from `AsRef<str>`.

Note that you won't be able to parse the number usefully at this point, but
that's ok.

Then I'd like for you to write a function which takes a filename and returns
a Result<Vec<EnumName>, Box<std::error::Error>> which opens and reads the file
(whichever approach you prefer) and then converts the lines into those EnumName
instances using the implementation above, returning a vector.

At this point, I'd like you to print out the result of parsing your input by
means of `println!("{:?}", thatvector);` to demonstrate that you've parsed
your input usefully.  Do this from your main() function which will therefore
also need to return an error result in order to allow you to use the `?` operator.
Also remember that you'll need to derive debug for your enum to make this possible.

Next I'd like you to define a struct to represent scores.  Each input line is,
in fact, a score from a test.  I'm not telling you if small numbers are good
or bad, they are simply scores.  I want your struct to contain a number of
values: a running total of all the scores you've seen, and a count of those
scores. If a line lacks a score, then it means that person didn't take the test
and you should not count a score for that line.  Instead you should count it
as a missed test, making a third value for your struct to store.

I will want this struct to have an implementation of `std::default::Default`
and for you to use this instead of writing a `ScoreStruct::new` function which
takes no arguments.

You'll want some nice methods on that struct such as `add_score` or `missed_test`
though you likely won't need accessor methods for the scores.

Finally I'd like you to use `HashMap` to map from a person's name to an
accumulation of their scores.  Ideally you should be using the `Entry` API on
the map to make your code nicer.

Ensure you can print the `HashMap` using `println!("{:?}", fullmap);`

Finally, demonstrate the full scores by iterating through the map, outputting
likes such as:

    Daniel Silverstone took N tests, with a total score of M.  They missed F tests.

Ensure that you use `test` vs `tests` with respect to pluralisation like we did
in the ten green bottles program.  It might be nice if this were done as an
implementation of `std::fmt::Display` on the score structure, allowing a statement
of the form: `println!("{} took {}", hashkey, hashvalue);` to be the core of the
iteration loop over the hash map.

Part 2 - Another step toward an interpreter
===========================================

We're going to begin developing a BF interpreter soon.  As such let's do some
work toward representing the program usefully.

Using the same input as you had from the first week, we're going to build an
intermediate representation of the program.

First up, please write an `enum` for BF instructions.  Remember that there are
eight possible instruction characters.  These are probably *raw* instructions
since we'll later want to do something clever for the loops, so name your enum
appropriately.

Implement an associated function `RawInstruction::from_char` which returns
an `Option<RawInstruction>` which is `None` if the input character isn't a valid
raw BF instruction.

Next, I would like a struct to represent each input instruction, using the
RawInstruction enumeration from above, and also a pair of `usize` values to
represent the line number and character column of the instruction.

Please write a function like in part 1 which takes a filename and returns a
Result<Vec<StructFromAbove>, Box<std::error::Error>>.

Use a debugging `println!` to ensure the parsed data is useful.

What I'd like as the final output of this part is something akin to:

    [inputfile:8:4] Increment
    [inputfile:8:5] StartLoop
    [inputfile:8:6] Decrement
    ...

This might require you to add a `Display` implementation for your `RawInstruction`
and appropriate methods on your struct to get hold of the line and column numbers.
Also make sure you give human numbering for lines and columns - humans count from
one, not zero.

As you implement this last part you may come across an error akin to:
"cannot move out of borrowed context" when implementing your accessor method
for the `RawInstruction`.  If you do, you might find the `Clone` and `Copy`
traits useful to derive on your nice simple enumeration.
